./.gitattributes:/win_toolchain/** recipes
./win_toolchain/README.md:Automatic updates of the Windows toolchain
./win_toolchain/README.md:- `vs_toolchain.py update` is called early during `DEPS`. `Update()` asks
./win_toolchain/README.md:  depot\_tools to put in place a particular version of the toolchain (whatever
./win_toolchain/README.md:  `Update()` saves relevant information about the toolchain, the paths, version
./win_toolchain/README.md:  `vs_toolchain:SetEnvironmentAndGetRuntimeDllDirs()`, which loads the .json
./win_toolchain/README.md:- Finally, it uses `vs_toolchain` again to copy runtime dlls to the output
./win_toolchain/README.md:for a given configuration) then the duplication of the toolchain in both trees
./win_toolchain/README.md:`get_toolchain_if_necessary.py` takes an output .json file (per above) and an
./win_toolchain/README.md:a bot) to encourage them to use the automatic toolchain rather than using a
./win_toolchain/README.md:with Express editions of VS. Along with `toolchain2013.py` this script dealt
./win_toolchain/README.md:that. The primary benefit of having an automatically updated toolchain is that
./win_toolchain/README.md:it works for bots, allows changes to the toolchain to be tryjob'd, reduces
./win_toolchain/README.md:For the above convoluted reason `get_toolchain_if_necessary` uses
./win_toolchain/README.md:`toolchain2013.py` to extract the zip file, but the majority of the code in
./win_toolchain/README.md:`get_toolchain_if_necessary` in the future.
./win_toolchain/README.md:whether the bits of the toolchain currently on disk are different than expected
./win_toolchain/README.md:(the passed in SHA1), and if so, replace it with a toolchain with the correct
./win_toolchain/README.md:back to when the toolchain was assembled from many pieces. It could probably
./win_toolchain/README.md:json file is generated during the unzip/acquire process in `toolchain2013.py`).
./win_toolchain/README.md:Ignoring the `toolchain2013.py` steps to acquire a toolchain automatically from
./win_toolchain/README.md:- Upload the resulting zip file to the chrome-wintoolchain GS bucket.
./win_toolchain/package_from_installed.py:From a system-installed copy of the toolchain, packages all the required bits
./win_toolchain/package_from_installed.py:import get_toolchain_if_necessary
./win_toolchain/package_from_installed.py:            ':: Generated by win_toolchain\\package_from_installed.py.\n')
./win_toolchain/package_from_installed.py:  sha1 = get_toolchain_if_necessary.CalculateHash(rel_dir, None)
./win_toolchain/get_toolchain_if_necessary.py:"""Downloads and unpacks a toolchain for building on Windows. The contents are
./win_toolchain/get_toolchain_if_necessary.py:matched by sha1 which will be updated when the toolchain is updated.
./win_toolchain/get_toolchain_if_necessary.py:Having a toolchain script in depot_tools means that it's not versioned
./win_toolchain/get_toolchain_if_necessary.py:directly with the source code. That is, if the toolchain is upgraded, but
./win_toolchain/get_toolchain_if_necessary.py:toolchain upgrade, this will cause you to build with a newer toolchain than
./win_toolchain/get_toolchain_if_necessary.py:reasons: 1) it would likely be annoying to have the up-to-date toolchain
./win_toolchain/get_toolchain_if_necessary.py:the toolchain. This is likely to be a poorly tested code path that probably
./win_toolchain/get_toolchain_if_necessary.py:This does not extend to major versions of the toolchain however, on the
./win_toolchain/get_toolchain_if_necessary.py:major revisions. This script calls a subscript (currently, toolchain2013.py)
./win_toolchain/get_toolchain_if_necessary.py:to do the main work. It is expected that toolchain2013.py will always be able
./win_toolchain/get_toolchain_if_necessary.py:to acquire/build the most current revision of a VS2013-based toolchain. In the
./win_toolchain/get_toolchain_if_necessary.py:# toolchain root directory to use.
./win_toolchain/get_toolchain_if_necessary.py:  |expected_hash| is the expected hash value for this toolchain if it has
./win_toolchain/get_toolchain_if_necessary.py:  # indicates which versions of the toolchain are still being used.
./win_toolchain/get_toolchain_if_necessary.py:      print ('%d files missing from the %s version of the toolchain:' %
./win_toolchain/get_toolchain_if_necessary.py:      print ('%d extra files in the %s version of the toolchain:' %
./win_toolchain/get_toolchain_if_necessary.py:  # Make long hangs when updating the toolchain less mysterious.
./win_toolchain/get_toolchain_if_necessary.py:  print 'Calculating hash of toolchain in %s. Please wait...' % full_root_path
./win_toolchain/get_toolchain_if_necessary.py:def CalculateToolchainHashes(root, remove_corrupt_toolchains):
./win_toolchain/get_toolchain_if_necessary.py:  """Calculate the hash of the different toolchains installed in the |root|
./win_toolchain/get_toolchain_if_necessary.py:    toolchain_hash = CalculateHash(root, d)
./win_toolchain/get_toolchain_if_necessary.py:    if toolchain_hash != d:
./win_toolchain/get_toolchain_if_necessary.py:      print ('The hash of a version of the toolchain has an unexpected value ('
./win_toolchain/get_toolchain_if_necessary.py:             '%s instead of %s)%s.' % (toolchain_hash, d,
./win_toolchain/get_toolchain_if_necessary.py:             ', removing it' if remove_corrupt_toolchains else ''))
./win_toolchain/get_toolchain_if_necessary.py:      if remove_corrupt_toolchains:
./win_toolchain/get_toolchain_if_necessary.py:      hashes.append(toolchain_hash)
./win_toolchain/get_toolchain_if_necessary.py:  """Checks whether the user has access to gs://chrome-wintoolchain/."""
./win_toolchain/get_toolchain_if_necessary.py:  code, _, _ = gsutil.check_call('ls', 'gs://chrome-wintoolchain/')
./win_toolchain/get_toolchain_if_necessary.py:  Googler. This allows much faster downloads, and pulling (old) toolchains
./win_toolchain/get_toolchain_if_necessary.py:  print 'Access to gs://chrome-wintoolchain/ not configured.'
./win_toolchain/get_toolchain_if_necessary.py:  """A grace period before deleting the out of date toolchain directory."""
./win_toolchain/get_toolchain_if_necessary.py:              '\rRemoving old toolchain in %ds... (Ctrl-C to cancel)' % i)
./win_toolchain/get_toolchain_if_necessary.py:  """Downloads the given file from Google Storage chrome-wintoolchain bucket."""
./win_toolchain/get_toolchain_if_necessary.py:  code = gsutil.call('cp', 'gs://chrome-wintoolchain/' + filename, target_path)
./win_toolchain/get_toolchain_if_necessary.py:  """Remove the |sha1| version of the toolchain from |root|."""
./win_toolchain/get_toolchain_if_necessary.py:  toolchain_target_dir = os.path.join(root, sha1)
./win_toolchain/get_toolchain_if_necessary.py:    DelayBeforeRemoving(toolchain_target_dir)
./win_toolchain/get_toolchain_if_necessary.py:  if os.path.isdir(toolchain_target_dir):
./win_toolchain/get_toolchain_if_necessary.py:    RmDir(toolchain_target_dir)
./win_toolchain/get_toolchain_if_necessary.py:  """Remove the versions of the toolchain that haven't been used recently."""
./win_toolchain/get_toolchain_if_necessary.py:  valid_toolchains = []
./win_toolchain/get_toolchain_if_necessary.py:        valid_toolchains.append((os.path.getmtime(vc_dir), d))
./win_toolchain/get_toolchain_if_necessary.py:    print ('Removing %s as it doesn\'t correspond to any known toolchain.' %
./win_toolchain/get_toolchain_if_necessary.py:    # contain an older version of the toolchain.
./win_toolchain/get_toolchain_if_necessary.py:  # Remove the versions of the toolchains that haven't been used in the past 30
./win_toolchain/get_toolchain_if_necessary.py:  toolchain_expiration_time = 60 * 60 * 24 * 30
./win_toolchain/get_toolchain_if_necessary.py:  for toolchain in valid_toolchains:
./win_toolchain/get_toolchain_if_necessary.py:    toolchain_age_in_sec = time.time() - toolchain[0]
./win_toolchain/get_toolchain_if_necessary.py:    if toolchain_age_in_sec > toolchain_expiration_time:
./win_toolchain/get_toolchain_if_necessary.py:      print ('Removing version %s of the Win toolchain has it hasn\'t been used'
./win_toolchain/get_toolchain_if_necessary.py:             ' in the past %d days.' % (toolchain[1],
./win_toolchain/get_toolchain_if_necessary.py:                                        toolchain_age_in_sec / 60 / 60 / 24))
./win_toolchain/get_toolchain_if_necessary.py:      RemoveToolchain(root, toolchain[1], True)
./win_toolchain/get_toolchain_if_necessary.py:  linker crashes and other toolchain failures. Documented at:
./win_toolchain/get_toolchain_if_necessary.py:                    help='write information about toolchain to FILE')
./win_toolchain/get_toolchain_if_necessary.py:  parser.add_option('--toolchain-dir',
./win_toolchain/get_toolchain_if_necessary.py:                    help='directory to install toolchain into')
./win_toolchain/get_toolchain_if_necessary.py:  # Create our toolchain destination and "chdir" to it.
./win_toolchain/get_toolchain_if_necessary.py:  toolchain_dir = os.path.abspath(options.toolchain_dir)
./win_toolchain/get_toolchain_if_necessary.py:  if not os.path.isdir(toolchain_dir):
./win_toolchain/get_toolchain_if_necessary.py:    os.makedirs(toolchain_dir)
./win_toolchain/get_toolchain_if_necessary.py:  os.chdir(toolchain_dir)
./win_toolchain/get_toolchain_if_necessary.py:  # Move to depot_tools\win_toolchain where we'll store our files, and where
./win_toolchain/get_toolchain_if_necessary.py:  toolchain_target_dir = os.path.join(target_dir, desired_hash)
./win_toolchain/get_toolchain_if_necessary.py:  abs_toolchain_target_dir = os.path.abspath(toolchain_target_dir)
./win_toolchain/get_toolchain_if_necessary.py:  got_new_toolchain = False
./win_toolchain/get_toolchain_if_necessary.py:    print('Windows toolchain out of date or doesn\'t exist, updating (Pro)...')
./win_toolchain/get_toolchain_if_necessary.py:    DoTreeMirror(toolchain_target_dir, desired_hash)
./win_toolchain/get_toolchain_if_necessary.py:    got_new_toolchain = True
./win_toolchain/get_toolchain_if_necessary.py:  win_sdk = os.path.join(abs_toolchain_target_dir, 'win_sdk')
./win_toolchain/get_toolchain_if_necessary.py:    version_file = os.path.join(toolchain_target_dir, 'VS_VERSION')
./win_toolchain/get_toolchain_if_necessary.py:    vc_dir = os.path.join(toolchain_target_dir, 'VC')
./win_toolchain/get_toolchain_if_necessary.py:      # version of the toolchain has been used for the last time.
./win_toolchain/get_toolchain_if_necessary.py:    # Older toolchains didn't have the VS_VERSION file, and used 'win8sdk'
./win_toolchain/get_toolchain_if_necessary.py:    win_sdk = os.path.join(abs_toolchain_target_dir, 'win8sdk')
./win_toolchain/get_toolchain_if_necessary.py:      'path': abs_toolchain_target_dir,
./win_toolchain/get_toolchain_if_necessary.py:      # Added for backwards compatibility with old toolchain packages.
./win_toolchain/get_toolchain_if_necessary.py:      'wdk': os.path.join(abs_toolchain_target_dir, 'wdk'),
./win_toolchain/get_toolchain_if_necessary.py:        os.path.join(abs_toolchain_target_dir, 'sys64'),
./win_toolchain/get_toolchain_if_necessary.py:        os.path.join(abs_toolchain_target_dir, 'sys32'),
./win_toolchain/get_toolchain_if_necessary.py:  if got_new_toolchain:
./win_toolchain/get_toolchain_if_necessary.py:          'Got wrong hash after pulling a new toolchain. '
./man/src/make_docs.sh:# them to html + manpage format using git 1.9's doc toolchain, then puts
./man/src/make_docs.sh:# We pull git to get its documentation toolchain
Binary file ./depot_tools/.git/objects/pack/pack-cb4432e834eca2727bab98a7597caf1fb62a3fcc.pack matches
Binary file ./depot_tools/.git/index matches
./bootstrap/win/win_tools.py:def _toolchain_in_use(toolchain_path):
./bootstrap/win/win_tools.py:  """Returns (bool): True if a toolchain rooted at |path| is in use.
./bootstrap/win/win_tools.py:      os.path.join(toolchain_path, 'python', 'bin'), # CIPD
./bootstrap/win/win_tools.py:      toolchain_path, # Legacy ZIP distributions.
./bootstrap/win/win_tools.py:      if not _toolchain_in_use(full_entry):
./bootstrap/win/README.md:  - Run `gclient version` to load HEAD toolchain (initial).
./bootstrap/win/README.md:  - Run `gclient version` to load HEAD toolchain (revert).
./.gitignore:/win_toolchain/vs2013_files
./.gitignore:/win_toolchain/vs_files
./.gitignore:/win_toolchain/*.timestamps
./.gitignore:/win_toolchain/.vspro
./.gitignore:/win_toolchain/data.json
